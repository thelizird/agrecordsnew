# Generated by Django 5.1.3 on 2024-11-20 16:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Crop",
            fields=[
                ("crop_id", models.AutoField(primary_key=True, serialize=False)),
                ("crop_name", models.CharField(max_length=255)),
            ],
            options={"db_table": "crop", "managed": False,},
        ),
        migrations.CreateModel(
            name="Field",
            fields=[
                ("field_id", models.AutoField(primary_key=True, serialize=False)),
                ("state", models.CharField(blank=True, max_length=100, null=True)),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                ("address", models.CharField(blank=True, max_length=255, null=True)),
                ("zip", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=7, max_digits=10, null=True
                    ),
                ),
                ("field_name", models.CharField(max_length=100)),
            ],
            options={"db_table": "field", "managed": False,},
        ),
        migrations.CreateModel(
            name="FieldHistory",
            fields=[
                ("field_hist_id", models.AutoField(primary_key=True, serialize=False)),
                ("plant_date", models.DateField()),
                ("harvest_date", models.DateField()),
                ("yield_amount", models.FloatField()),
            ],
            options={"db_table": "field_history", "managed": False,},
        ),
        migrations.CreateModel(
            name="Lab",
            fields=[
                ("lab_id", models.AutoField(primary_key=True, serialize=False)),
                ("lab_name", models.CharField(max_length=255)),
            ],
            options={"db_table": "lab", "managed": False,},
        ),
        migrations.CreateModel(
            name="SoilTest",
            fields=[
                ("soil_id", models.AutoField(primary_key=True, serialize=False)),
                ("test_date", models.DateField()),
                ("ph", models.FloatField()),
                ("salts", models.FloatField()),
                ("chlorides", models.FloatField()),
                ("sodium", models.FloatField()),
                ("cec", models.FloatField()),
                ("excess_lime", models.FloatField()),
                ("organic_matter", models.FloatField()),
                ("organic_n", models.FloatField()),
                ("ammonium_n", models.FloatField()),
                ("nitrate_n", models.FloatField()),
                ("phosphorus", models.FloatField()),
                ("potassium_ppm", models.FloatField()),
                ("potassium_meq_per_100g", models.FloatField()),
                ("calcium_ppm", models.FloatField()),
                ("calcium_meq_per_100g", models.FloatField()),
                ("magnesium_ppm", models.FloatField()),
                ("magnesium_meq_per_100g", models.FloatField()),
                ("sulfate", models.FloatField()),
                ("zinc", models.FloatField()),
                ("iron", models.FloatField()),
                ("manganese", models.FloatField()),
                ("copper", models.FloatField()),
                ("boron", models.FloatField()),
                ("recom_nitrogen", models.FloatField()),
                ("recom_phos", models.FloatField()),
                ("recom_potash", models.FloatField()),
                ("recom_calcium", models.FloatField()),
                ("recom_magnesium", models.FloatField()),
                ("recom_sulphur", models.FloatField()),
                ("recom_zinc", models.FloatField()),
                ("recom_iron", models.FloatField()),
                ("recom_manganese", models.FloatField()),
                ("recom_copper", models.FloatField()),
                ("recom_boron", models.FloatField()),
                ("recom_gypsum", models.FloatField()),
                ("recom_lime", models.FloatField()),
            ],
            options={"db_table": "soil_test", "managed": False,},
        ),
        migrations.CreateModel(
            name="Yield",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("yield_number", models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={"db_table": "yield", "managed": False,},
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("COMPANY", "Company"),
                            ("AGRONOMIST", "Agronomist"),
                            ("FARMER", "Farmer"),
                        ],
                        default="COMPANY",
                        max_length=10,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[("objects", django.contrib.auth.models.UserManager()),],
        ),
        migrations.CreateModel(
            name="Company",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company_name", models.CharField(max_length=255)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Agronomist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.company"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Farmer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.company"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("fertilizer_application", "Fertilizer Application"),
                            ("seeding_new_crop", "Seeding New Crop"),
                            ("irrigation", "Irrigation"),
                            ("herbicide_application", "Herbicide Application"),
                            ("pesticide_application", "Pesticide Application"),
                            ("harvest", "Harvest"),
                            ("mechanical_disturbance", "Mechanical Disturbance"),
                            ("weather", "Weather"),
                            ("livestock", "Livestock"),
                            ("management", "Management"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("text", models.TextField(blank=True, default="")),
                ("year", models.PositiveIntegerField(default=2024)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={"unique_together": {("category", "year")},},
        ),
    ]
